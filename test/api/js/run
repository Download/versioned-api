#!/usr/bin/env node
initEnv() // Setup the test env variables before we require the server

const server = require('app/server')
const fs = require('fs')
const path = require('path')
const apiClient = require('./api_client')
const {unique, concat} = require('lib/util')
const {elapsedSeconds} = require('lib/date_util')
const config = require('app/config')
const mongo = require('lib/mongo')
const {AssertionError} = require('assert')
const spaces = require('app/models/spaces')

const BASE_URL = `http://localhost:${process.env.PORT}/v1`
const DEDICATED_MONGODB_URL = `${config.MONGODB_URL}_dedicated`

function initEnv () {
  const TEST_ENV = {
    NODE_ENV: 'test',
    PORT: 3006
  }
  Object.assign(process.env, TEST_ENV)
}

function suites () {
  const suitesPath = path.join(__dirname, '/suites')
  const allSuites = fs.readdirSync(suitesPath).map(filename => path.parse(filename).name)
  const setup = (process.env['SETUP'] !== '0' && allSuites.includes('setup')) ? ['setup'] : []
  const skipSuites = process.env.SKIP_SUITES ? process.env.SKIP_SUITES.split(',') : []
  const allSuitesWithoutSetup = allSuites.filter((suite) => {
    return suite !== 'setup' && !skipSuites.includes(suite)
  }).sort()
  const customSuites = process.env.SUITES && process.env.SUITES.split(',')
  return concat(setup, (customSuites || allSuitesWithoutSetup))
}

function printSuiteHeader (suiteName) {
  console.log('\n##################################################')
  console.log(`# Suite: ${suiteName}`)
  console.log('##################################################')
}

function printResults (client, startTime) {
  console.log('\nOK!')
  const suites = unique(client.requests.map(r => r.suite))
  console.log(`Number of suites: ${suites.length} - ${suites.join(', ')}`)
  console.log(`Number of API calls: ${client.requests.length}`)
  console.log(`Elapsed seconds: ${elapsedSeconds(startTime)}`)
}

async function run () {
  const startTime = new Date()

  const client = apiClient({BASE_URL, DEDICATED_MONGODB_URL})
  await server.start()
  await spaces.deleteSearchIndexes()
  await config.modules.mongo.db().dropDatabase()
  const dedicatedMongo = mongo(DEDICATED_MONGODB_URL)
  await dedicatedMongo.connect()
  await spaces.deleteSearchIndexes(dedicatedMongo)
  await dedicatedMongo.db().dropDatabase()
  const completedSuites = []
  const failedSuites = []
  for (let suiteName of suites()) {
    printSuiteHeader(suiteName)
    client.suite = suiteName
    const suite = require(`./suites/${suiteName}`)
    try {
      await suite(client)
      completedSuites.push(suiteName)
    } catch (err) {
      if (!(err instanceof AssertionError)) {
        client.printLastResult()
        client.logRequests()
      }
      failedSuites.push(suiteName)
      console.log(`\nFAILURE!!! Suite failed: ${suiteName}\n`)
      if (process.env.HALT_ON_FAILURE !== '0') throw err
    }
  }
  if (failedSuites.length > 0) {
    console.log(`Failed suites: ${failedSuites.length} - ${failedSuites.join(', ')}`)
    console.log(`Successful suites: ${completedSuites.length} - ${completedSuites.join(', ')}`)
    throw new Error(`The following ${failedSuites.length} suites failed: ${failedSuites.join(', ')}`)
  }
  printResults(client, startTime)
  client.logRequests()
  // NOTE: Sometimes it's useful to keep the test server running for debugging
  if (process.env.EXIT !== '0') process.exit(0)
}

run()
