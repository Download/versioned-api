#!/usr/bin/env node
initEnv() // Setup the test env variables before we require the server

const server = require('app/server')
const fs = require('fs')
const path = require('path')
const apiClient = require('./api_client')
const {unique, concat} = require('lib/util')
const {elapsedSeconds} = require('lib/date_util')
const mongo = require('lib/mongo')

const BASE_URL = `http://localhost:${process.env.PORT}/v1`

function initEnv () {
  const TEST_ENV = {
    NODE_ENV: 'test',
    PORT: 3006
  }
  Object.assign(process.env, TEST_ENV)
}

function suites () {
  const suitesPath = path.join(__dirname, '/suites')
  const allSuites = fs.readdirSync(suitesPath).map(filename => path.parse(filename).name)
  const setup = (process.env['SETUP'] !== '0' && allSuites.includes('setup')) ? ['setup'] : []
  const allSuitesWithoutSetup = allSuites.filter(s => s !== 'setup').sort()
  const customSuites = process.env.SUITES && process.env.SUITES.split(',')
  return concat(setup, (customSuites || allSuitesWithoutSetup))
}

function printSuiteHeader (suiteName) {
  console.log('\n##################################################')
  console.log(`# Suite: ${suiteName}`)
  console.log('##################################################')
}

function printResults (client, startTime) {
  console.log('\nOK!')
  const suites = unique(client.requests.map(r => r.suite))
  console.log(`Number of suites: ${suites.length} - ${suites.join(', ')}`)
  console.log(`Number of API calls: ${client.requests.length}`)
  console.log(`Elapsed seconds: ${elapsedSeconds(startTime)}`)
}

async function run () {
  const startTime = new Date()
  const client = apiClient({BASE_URL})
  await server.start()
  await mongo.db().dropDatabase()
  for (let suiteName of suites()) {
    printSuiteHeader(suiteName)
    client.suite = suiteName
    const suite = require(`./suites/${suiteName}`)
    await suite(client)
  }
  printResults(client, startTime)
  client.logRequests(client)
  // NOTE: Sometimes it's useful to keep the test server running for debugging
  if (process.env.EXIT !== '0') process.exit(0)
}

run()
